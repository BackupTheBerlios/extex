#!/bin/perl -w
##*****************************************************************************
## $Id: analyzeConfig,v 1.1 2005/06/01 08:43:28 gene Exp $
##*****************************************************************************
## Author: Gerd Neugebauer
##=============================================================================

=head1 NAME

analyzeConfig - ...

=head1 SYNOPSIS

analyzeConfig [-v|--verbose] 

analyzeConfig [-h|-help]

=head1 DESCRIPTION

=head1 OPTIONS

=head1 AUTHOR

Gerd Neugebauer

=head1 BUGS

=over 4

=item *

...

=back

=cut

use strict;
use FileHandle;

#------------------------------------------------------------------------------
# Function:	usage
# Arguments:	
# Returns:	
# Description:	
#
sub usage
{ use Pod::Text;
  Pod::Text->new()->parse_from_filehandle(new FileHandle($0,'r'),\*STDERR);
}

#------------------------------------------------------------------------------
# Variable:	$verbose
# Description:	
#
my $verbose = 0;

use Getopt::Long;
GetOptions("h|help"	=> \&usage,
	   "v|verbose"	=> \$verbose,
	  );

my $out	       = \*STDOUT;
my %cfg	       = ();
my %primitives = ();

foreach my $file (@ARGV) {
  local $_ = $file;
  s|.*/(.*)\.xml|$1|;
  $cfg{$_} = $file;
}

print $out "\n\\subsection{Predefined Configurations}\n";

foreach (sort keys %cfg) {
  processConfig($_, $cfg{$_});
}

print $out "\n\\subsection{Primitive Sets}\n";

foreach (sort keys %primitives) {
  processPrimitives($_, $primitives{$_});
}


sub processPrimitives {
  my ($name, $file) = @_;
  my %prim;
  local $_;
  print $out <<__EOF__;
\\subsubsection{The Primitive Set \\texttt{$name}}

  The primitive set \\texttt{$name} defined the following primitives:

  \\begin{primitives}
__EOF__
  my $fd = new FileHandle($file,'r') || die "$file:$!\n";
  while (<$fd>) {
    if (not m/>/) {
      $_ .= <$fd>;
    }
    if (m|<[dD]efine name="([^\"]*)"|\w+class="([^\"]*)") {
      $prim{$1} = $2;
    }
  }
  $fd->close();
  foreach (sort keys %prim) {
    s|\\\\|\\char`\\\\|g; #`
    #s| |\\ {}|g; #`
    print $out "   \\macro{$_}\n";
  }
  print $out "\\end{primitives}\n";
}

sub processConfig {
  my ($name, $file) = @_;
  my $banner;
  local $_;
  my $extReg = undef;
  my @prim   = ();
  my $dir    = $file;
  $dir	     =~ s|/[^/]*$||;
  my $fd   = new FileHandle($file,'r');
  while (<$fd>) {
    if (m|<banner>(.*)</banner>|) {
      $banner = $1;
    } elsif (m|<ExtendedRegisterNames>(.*)</ExtendedRegisterNames>|) {
      $extReg = ($1 eq "true");
    } elsif (m|<primitives src="(.*)"|) {
      my $p = $1;
      $p =~ m|.*/(.*)\.xml|;
      $primitives{$1} = "$dir/$p";
      push @prim, $1;
    }
  }
  $fd->close();

  print $out <<__EOF__;

\\subsubsection{The Configuration \\texttt{$name}}\\index{$name}

The configuration \\texttt{$name} identifies itself as
``$banner''.
__EOF__

  if (length(@prim) == 0) {
    print $out "The configuration contains no primitive sets.";
  } elsif (length(@prim) == 1) {
    print $out "The configuration contains the primitive set \\texttt{$prim[0]}.\n";
  } elsif (length(@prim) == 2) {
    print $out "The configuration contains the primitive sets \\texttt{$prim[0]} and \\texttt{$prim[1]}.\n";
  } else {
    print $out "The configuration contains the primitive sets ";
    my $plast = pop @prim;
    foreach (@prim) {
      print $out "\\texttt{$_}, ";
    }
    print $out " and \\texttt{$plast}.\n";
  }
  if ($extReg) {
    print $out "The configuration allows extended register names.\n";
  }
}

#------------------------------------------------------------------------------
# Local Variables: 
# mode: perl
# End: 
